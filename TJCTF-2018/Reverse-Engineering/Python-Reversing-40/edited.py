'''
dumblole
Brute force script to get the rest of the flag.
Too lazy to do it by hand.
'''

import numpy as np

flag = 'tjctf{'
charSet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-=_+[]{};\':",./<>?`~!@#$%^&*()'
testResult=''
result='1001100001011110110100001100001010000011110101001100100011101111110100011111010101010000000110000011101101110000101111101010111011100101000011011010110010100001100010001010101001100001110110100110011101'

#original function
def flag_check(flag):
    np.random.seed(12345)
    arr = np.array([ord(c) for c in flag])
    other = np.random.randint(1,5,(len(flag)))
    arr = np.multiply(arr,other)

    b = [x for x in arr]
    lmao = [ord(x) for x in ''.join(['ligma_sugma_sugondese_'*5])]

    c = [b[i]^lmao[i] for i,j in enumerate(b)]
    return(''.join(bin(x)[2:].zfill(8) for x in c))


while testResult != result:
    for char in charSet:
        testResult = flag_check(flag + char)
        if testResult == result[:len(testResult)]:
            flag = flag+char
            break
            
'''      
print(arr)
print(other)
print(b)
print(lmao)
print(c)
# original_output was 1001100001011110110100001100001010000011110101001100100011101111110100011111010101010000000110000011101101110000101111101010111011100101000011011010110010100001100010001010101001100001110110100110011101

#1001100001011110110100001100001010000011110101001100100011101111110100011111010101010000000110000011101101110000101111101010111011100101000011011010110010100001100010001010101001100001110110100110011101
#1001100001011110110100001100001010000011110101001100100011101111110100011111010101010000000110000011101101110000101111101010111011100101000011011010110010100001100010001010101001100001110110100110011101
#100110000 10111101 10100001 10000101 00000111 10101001
#1001100001011110110100001100001010000011110101001
#100110000 10111101
#100110000
#101010010
print(''.join(['ligma_sugma_sugondese_'*5]))
'''
print(flag)
